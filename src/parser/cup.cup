package parser;

import java_cup.runtime.*;

// Imports adicionados
import java.io.IOException;
import java.nio.file.Path;
import syntaxtree.*;
import lexer.Lexer;

parser code {:

    private Lexer lexer;

   
    private Path file;
    
    public String action;


    public Parser(Path file) throws IOException {

        this.file = file;
        action = "";

        ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

        super.symbolFactory = symbolFactory;

        this.lexer = new Lexer(file, symbolFactory);
    }
:}

init with {:
:};

scan with {:

    return lexer.next_token();
:};



terminal CLASS, PUBLIC, EXTENDS, STATIC, VOID, INT, BOOLEAN, WHILE, IF, ELSE, RETURN, THIS, NEW,
         SEMICOLON, DOT, COMMA, ASSIGN, O_PAR, C_PAR, O_BRAC, C_BRAC, O_BRACK, C_BRACK,
         OR, AND, EQUALS, DIFF, LESS, LESS_EQ, GREATER, GREATER_EQ, PLUS, MINUS, TIMES, SLASH, PERCENT, OPP;
terminal Boolean FALSE, TRUE;
terminal Integer INTEGER;
terminal String ID;


terminal MAIN, PRINTLN, LENGTH;


terminal STRGARG;




non terminal Program prog;

// Declarações
non terminal MainClassDecl mClass;
non terminal ClassDeclList classList;
non terminal ClassDecl clas; 
non terminal Identifier ext;
non terminal VarDeclList varList;
non terminal VarDecl var;
non terminal MethodDeclList methodList;
non terminal MethodDecl method;
non terminal ArgumentList argumentList;
non terminal ArgumentList arguments;
non terminal Argument argument;

non terminal Type type;
non terminal Identifier id;

non terminal StatementList stmtList;
non terminal Statement stmt;
non terminal Expression expr;

non terminal ExpressionList paramList;
non terminal ExpressionList params;


precedence right ASSIGN;

precedence left AND, OR;

precedence right OPP;

precedence nonassoc EQUALS, DIFF, LESS, LESS_EQ, GREATER, GREATER_EQ;

precedence left PLUS, MINUS;

precedence left TIMES, SLASH, PERCENT;

precedence left ELSE;

precedence right NEW;


precedence nonassoc ID;

precedence left DOT;

// Gramática

prog        ::= mClass:main classList:cList                             {:this.parser.action += "\nprog => mClass classList\n" ; RESULT = new Program(main, cList);:} 
            ;

mClass      ::= CLASS id:name O_BRAC PUBLIC STATIC VOID MAIN O_PAR STRGARG id:args C_PAR O_BRAC stmtList:main C_BRAC C_BRAC
                                                                        {:this.parser.action+= "\nmClass => class id { public static void main ( String[] id) { stmtList} }\n";RESULT = new MainClassDecl(name, args, main);:}
            ;

classList   ::= classList:cList clas:cl                                 {:this.parser.action +="\nclassList=> classList clas\n";cList.add(cl);cList.addFilho(cl);RESULT = cList;:}
                |                                                       {:this.parser.action +="\nclassList=> E\n";RESULT = new ClassDeclList();:}
            ;

clas        ::= CLASS id:name ext:extclass O_BRAC varList:vars methodList:methods C_BRAC
                                                                        {:if (extclass == null) {this.parser.action +="\nclas => class id { varList methodList }\n";RESULT = new SimpleClassDecl(name, vars, methods);}
                                                                        else{ this.parser.action +="\nclas => nclass id extends id { varList methodList }\n";RESULT = new ExtendedClassDecl(name, vars, methods, extclass);}:}
            ;

ext         ::= EXTENDS id:cl                                           {:this.parser.action +="\next => extends id\n";RESULT = cl;:}
                |                                                       {:this.parser.action +="\next => E\n";RESULT = null;:}
            ;

varList     ::= varList:vList var:var                                   {:vList.add(var);vList.addFilho(var); RESULT = vList;:}
                |                                                       {:RESULT = new VarDeclList();;:}
            ;

var         ::= type:type id:name SEMICOLON                             {:RESULT = new VarDecl(type, name);:}
            ;

methodList  ::= methodList:mList method:method                          {:mList.add(method); mList.addFilho(method);RESULT = mList;:}
                |                                                       {:RESULT = new MethodDeclList();:}
            ;

method      ::= PUBLIC type:rType id:name O_PAR argumentList:args C_PAR O_BRAC varList:vars stmtList:code RETURN expr:ret SEMICOLON C_BRAC
                                                                        {:RESULT = new MethodDecl(rType, name, args, vars, code, ret);:}
            ;

argumentList::= arguments:aList                                         {:RESULT = aList;:}
                |                                                       {:RESULT = new ArgumentList();:}
            ;

arguments   ::= arguments:aList COMMA argument:arg                      {:aList.add(arg); aList.addFilho(arg);RESULT = aList;:}
                | argument:arg                                          {:RESULT = new ArgumentList(); RESULT.add(arg); RESULT.addFilho(arg);:}
            ;

argument    ::= type:type id:name                                       {:RESULT = new Argument(type, name);:}
            ;

type        ::= INT                                                     {:RESULT = new IntegerType();:}
                | INT O_BRACK C_BRACK                                   {:RESULT = new IntArrayType();:}
                | BOOLEAN                                               {:RESULT = new BooleanType();:}
                | id:id                                                 {:RESULT = new IdentifierType(id);:}
            ;

id          ::= ID:stringid                                             {:RESULT = new Identifier(stringid);:}
            ;

stmtList    ::= stmt:stmt stmtList:sList                                {:sList.add(stmt); sList.addFilho(stmt);RESULT = sList;:}
                |                                                       {:RESULT = new StatementList();:}
            ;

stmt        ::= O_BRAC stmtList:sList C_BRAC                            {:RESULT = new BlockStmt(sList);:}
                | IF O_PAR expr:expr C_PAR stmt:i ELSE stmt:e           {:RESULT = new IfStmt(expr, i, e);:}
                | IF O_PAR expr:expr C_PAR stmt:i                       {:RESULT = new IfStmt(expr, i);:}
                | WHILE O_PAR expr:expr C_PAR stmt:s                    {:RESULT = new WhileStmt(expr, s);:}
                | PRINTLN O_PAR expr:expr C_PAR SEMICOLON               {:RESULT = new PrintStmt(expr);:}
                | id:var ASSIGN expr:expr SEMICOLON                     {:RESULT = new AssignStmt(var, expr);:}
                | id:array O_BRACK expr:index C_BRACK ASSIGN expr:expr SEMICOLON   {:RESULT = new ArrayAssignStmt(array, index, expr);:}
            ;

expr        ::= expr:l OR expr:r                                        {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.OR);:}
                | expr:l AND expr:r                                     {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.AND);:}
                | expr:l EQUALS expr:r                                  {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.EQUALS);:}
                | expr:l DIFF expr:r                                    {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.DIFF);:}
                | expr:l LESS expr:r                                    {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.LESS);:}
                | expr:l LESS_EQ expr:r                                 {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.LESS_THAN);:}
                | expr:l GREATER expr:r                                 {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.GREATER);:}
                | expr:l GREATER_EQ expr:r                              {:RESULT = new BinaryBooleanExpr(l, r, BinaryBooleanExpr.BinaryBooleanOperation.GREATER_THAN);:}
                | expr:l PLUS expr:r                                    {:RESULT = new BinaryIntegerExpr(l, r, BinaryIntegerExpr.BinaryIntegerOperation.PLUS);:}
                | expr:l MINUS expr:r                                   {:RESULT = new BinaryIntegerExpr(l, r, BinaryIntegerExpr.BinaryIntegerOperation.MINUS);:}
                | expr:l TIMES expr:r                                   {:RESULT = new BinaryIntegerExpr(l, r, BinaryIntegerExpr.BinaryIntegerOperation.MUL);:}
                | expr:l SLASH expr:r                                   {:RESULT = new BinaryIntegerExpr(l, r, BinaryIntegerExpr.BinaryIntegerOperation.DIV);:}
                | expr:l PERCENT expr:r                                 {:RESULT = new BinaryIntegerExpr(l, r, BinaryIntegerExpr.BinaryIntegerOperation.MOD);:}
                | OPP expr:e                                            {:RESULT = new UnaryBooleanExpr(e, UnaryBooleanExpr.UnaryBooleanOperation.OPPOSITE);:}
                | expr:array O_BRACK expr:index C_BRACK                 {:RESULT = new ArrayLookupExpr(array, index);:}
                | expr:array DOT LENGTH                                 {:RESULT = new ArrayLengthExpr(array);:}
                | expr:obj DOT id:method O_PAR paramList:pList C_PAR    {:RESULT = new MethodCallExpr(obj, method, pList);:}
                | INTEGER:v                                             {:RESULT = new IntegerLiteralExpr(v);:}
                | FALSE:v                                               {:RESULT = new BooleanLiteralExpr(v);:}
                | TRUE:v                                                {:RESULT = new BooleanLiteralExpr(v);:}
                | id:v                                                  {:RESULT = new IdentifierExpr(v);:}
                | THIS                                                  {:RESULT = new ThisExpr();:}
                | NEW INT O_BRACK expr:len C_BRACK                      {:RESULT = new NewArrayExpr(len);:}
                | NEW id:type O_PAR C_PAR                               {:RESULT = new NewObjectExpr(type);:}
                | O_PAR expr:expr C_PAR                                 {:RESULT = expr;:}
                | expr:e INTEGER:i                                      {:if(i < 0) RESULT = new BinaryIntegerExpr(e, new IntegerLiteralExpr(-i), BinaryIntegerExpr.BinaryIntegerOperation.MINUS);
                                                                                  else throw new UnsupportedOperationException();:}
            ;

paramList   ::= params:params                                           {:RESULT = params;:}
                |                                                       {:RESULT = new ExpressionList();:}
            ;

params      ::= params:pList COMMA expr:param                           {:pList.add(param); pList.addFilho(param);RESULT = pList;:}
                | expr:param                                            {:RESULT = new ExpressionList(); RESULT.add(param);RESULT.addFilho(param);:}
            ;
