
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 13 16:30:28 BRT 2016
//----------------------------------------------------

package cupbyexampletest;

import java.io.*;
import java_cup.runtime.Symbol;
import arvoresintatica.No;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 13 16:30:28 BRT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\005" +
    "\023\000\002\003\011\000\002\004\004\000\002\004\002" +
    "\000\002\011\004\000\002\011\002\000\002\012\005\000" +
    "\002\013\004\000\002\013\002\000\002\016\017\000\002" +
    "\017\004\000\002\017\002\000\002\020\005\000\002\021" +
    "\003\000\002\021\002\000\002\022\006\000\002\022\002" +
    "\000\002\006\005\000\002\006\007\000\002\006\011\000" +
    "\002\006\007\000\002\006\007\000\002\006\004\000\002" +
    "\007\005\000\002\007\010\000\002\010\004\000\002\010" +
    "\002\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\003\000\002\014\005\000\002\014\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\004\000\002\026\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\007\000\002\026\005\000\002\026\006\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\006" +
    "\000\002\027\005\000\002\027\005\000\002\027\010\000" +
    "\002\030\004\000\002\031\003\000\002\031\002\000\002" +
    "\032\005\000\002\032\002\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\007\006\001\002\000\004\002\233\001" +
    "\002\000\006\002\ufffc\007\ufffc\001\002\000\004\023\010" +
    "\001\002\000\004\050\011\001\002\000\050\010\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\052\uffbf\053\uffbf\001\002\000\004" +
    "\011\012\001\002\000\004\012\013\001\002\000\004\014" +
    "\014\001\002\000\004\013\015\001\002\000\004\044\016" +
    "\001\002\000\004\005\017\001\002\000\004\046\020\001" +
    "\002\000\004\047\021\001\002\000\004\023\010\001\002" +
    "\000\004\045\023\001\002\000\004\050\024\001\002\000" +
    "\014\016\027\023\010\037\030\041\032\050\031\001\002" +
    "\000\004\051\157\001\002\000\006\026\145\046\146\001" +
    "\002\000\004\044\141\001\002\000\004\044\133\001\002" +
    "\000\016\016\uffe5\023\uffe5\037\uffe5\041\uffe5\050\uffe5\051" +
    "\uffe5\001\002\000\004\044\033\001\002\000\026\020\034" +
    "\021\037\022\052\023\010\027\045\033\042\042\050\043" +
    "\041\044\047\054\036\001\002\000\006\006\122\023\010" +
    "\001\002\000\022\025\061\030\060\031\062\036\uffdf\045" +
    "\uffdf\047\uffdf\052\uffdf\053\uffdf\001\002\000\032\025\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\045\uffd0\047\uffd0\052\uffd0\053\uffd0\001\002\000\036" +
    "\024\uffc9\025\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9" +
    "\053\uffc9\001\002\000\006\036\055\045\117\001\002\000" +
    "\032\025\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\045\uffd1\047\uffd1\052\uffd1\053\uffd1\001" +
    "\002\000\026\020\034\021\037\022\052\023\010\027\045" +
    "\033\042\042\050\043\041\044\047\054\036\001\002\000" +
    "\032\025\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\067" +
    "\035\070\036\uffd8\045\uffd8\047\uffd8\052\uffd8\053\uffd8\001" +
    "\002\000\026\025\uffdb\030\uffdb\031\uffdb\032\065\033\064" +
    "\036\uffdb\045\uffdb\047\uffdb\052\uffdb\053\uffdb\001\002\000" +
    "\026\020\034\021\037\022\052\023\010\027\045\033\042" +
    "\042\050\043\041\044\047\054\036\001\002\000\036\024" +
    "\077\025\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\045\uffcb\046\076\047\uffcb\052\uffcb\053" +
    "\uffcb\001\002\000\026\020\034\021\037\022\052\023\010" +
    "\027\045\033\042\042\050\043\041\044\047\054\036\001" +
    "\002\000\032\025\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\045\uffd2\047\uffd2\052\uffd2\053" +
    "\uffd2\001\002\000\036\024\uffca\025\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\045\uffca\046" +
    "\uffca\047\uffca\052\uffca\053\uffca\001\002\000\032\025\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\045\uffcf\047\uffcf\052\uffcf\053\uffcf\001\002\000\032" +
    "\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\045\uffd5\047\uffd5\052\uffd5\053\uffd5\001\002" +
    "\000\006\036\055\045\056\001\002\000\026\020\034\021" +
    "\037\022\052\023\010\027\045\033\042\042\050\043\041" +
    "\044\047\054\036\001\002\000\036\024\uffc7\025\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\052\uffc7\053\uffc7\001\002\000" +
    "\022\025\061\030\060\031\062\036\uffe0\045\uffe0\047\uffe0" +
    "\052\uffe0\053\uffe0\001\002\000\026\020\034\021\037\022" +
    "\052\023\010\027\045\033\042\042\050\043\041\044\047" +
    "\054\036\001\002\000\026\020\034\021\037\022\052\023" +
    "\010\027\045\033\042\042\050\043\041\044\047\054\036" +
    "\001\002\000\026\020\034\021\037\022\052\023\010\027" +
    "\045\033\042\042\050\043\041\044\047\054\036\001\002" +
    "\000\026\025\uffdc\030\uffdc\031\uffdc\032\065\033\064\036" +
    "\uffdc\045\uffdc\047\uffdc\052\uffdc\053\uffdc\001\002\000\026" +
    "\020\034\021\037\022\052\023\010\027\045\033\042\042" +
    "\050\043\041\044\047\054\036\001\002\000\026\020\034" +
    "\021\037\022\052\023\010\027\045\033\042\042\050\043" +
    "\041\044\047\054\036\001\002\000\032\025\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\067\035\070\036\uffda\045" +
    "\uffda\047\uffda\052\uffda\053\uffda\001\002\000\026\020\034" +
    "\021\037\022\052\023\010\027\045\033\042\042\050\043" +
    "\041\044\047\054\036\001\002\000\026\020\034\021\037" +
    "\022\052\023\010\027\045\033\042\042\050\043\041\044" +
    "\047\054\036\001\002\000\032\025\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\045\uffd6\047" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\032\025\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\045" +
    "\uffd7\047\uffd7\052\uffd7\053\uffd7\001\002\000\032\025\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\067\035\070\036" +
    "\uffd9\045\uffd9\047\uffd9\052\uffd9\053\uffd9\001\002\000\026" +
    "\025\uffde\030\uffde\031\uffde\032\065\033\064\036\uffde\045" +
    "\uffde\047\uffde\052\uffde\053\uffde\001\002\000\026\025\uffdd" +
    "\030\uffdd\031\uffdd\032\065\033\064\036\uffdd\045\uffdd\047" +
    "\uffdd\052\uffdd\053\uffdd\001\002\000\026\020\034\021\037" +
    "\022\052\023\010\027\045\033\042\042\050\043\041\044" +
    "\047\054\036\001\002\000\006\017\101\023\010\001\002" +
    "\000\040\024\uffc6\025\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\044\102\045\uffc6\046\uffc6" +
    "\047\uffc6\052\uffc6\053\uffc6\001\002\000\032\025\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\045\uffcd\047\uffcd\052\uffcd\053\uffcd\001\002\000\030\020" +
    "\034\021\037\022\052\023\010\027\045\033\042\042\050" +
    "\043\041\044\047\045\uffc2\054\036\001\002\000\004\045" +
    "\112\001\002\000\004\045\uffc3\001\002\000\010\036\055" +
    "\045\uffc0\052\107\001\002\000\004\045\uffc4\001\002\000" +
    "\026\020\034\021\037\022\052\023\010\027\045\033\042" +
    "\042\050\043\041\044\047\054\036\001\002\000\010\036" +
    "\055\045\uffc0\052\107\001\002\000\004\045\uffc1\001\002" +
    "\000\036\024\uffc5\025\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\006\036\055\047\114\001" +
    "\002\000\032\025\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\045\uffcc\047\uffcc\052\uffcc\053" +
    "\uffcc\001\002\000\032\025\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\045\uffd4\047\uffd4\052" +
    "\uffd4\053\uffd4\001\002\000\032\025\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\045\uffd3\047" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\014\016\027\023\010" +
    "\037\030\041\032\050\031\001\002\000\022\015\uffeb\016" +
    "\uffeb\023\uffeb\037\uffeb\040\uffeb\041\uffeb\050\uffeb\051\uffeb" +
    "\001\002\000\004\044\126\001\002\000\004\046\123\001" +
    "\002\000\026\020\034\021\037\022\052\023\010\027\045" +
    "\033\042\042\050\043\041\044\047\054\036\001\002\000" +
    "\006\036\055\047\125\001\002\000\032\025\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\045" +
    "\uffce\047\uffce\052\uffce\053\uffce\001\002\000\004\045\127" +
    "\001\002\000\036\024\uffc8\025\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\052\uffc8\053\uffc8\001\002\000\016\016\027\023" +
    "\010\037\030\041\032\050\031\051\132\001\002\000\020" +
    "\015\uffe6\016\uffe6\023\uffe6\037\uffe6\041\uffe6\050\uffe6\051" +
    "\uffe6\001\002\000\022\015\uffee\016\uffee\023\uffee\037\uffee" +
    "\040\uffee\041\uffee\050\uffee\051\uffee\001\002\000\026\020" +
    "\034\021\037\022\052\023\010\027\045\033\042\042\050" +
    "\043\041\044\047\054\036\001\002\000\006\036\055\045" +
    "\135\001\002\000\014\016\027\023\010\037\030\041\032" +
    "\050\031\001\002\000\022\015\uffed\016\uffed\023\uffed\037" +
    "\uffed\040\137\041\uffed\050\uffed\051\uffed\001\002\000\014" +
    "\016\027\023\010\037\030\041\032\050\031\001\002\000" +
    "\022\015\uffec\016\uffec\023\uffec\037\uffec\040\uffec\041\uffec" +
    "\050\uffec\051\uffec\001\002\000\026\020\034\021\037\022" +
    "\052\023\010\027\045\033\042\042\050\043\041\044\047" +
    "\054\036\001\002\000\006\036\055\045\143\001\002\000" +
    "\004\053\144\001\002\000\022\015\uffea\016\uffea\023\uffea" +
    "\037\uffea\040\uffea\041\uffea\050\uffea\051\uffea\001\002\000" +
    "\026\020\034\021\037\022\052\023\010\027\045\033\042" +
    "\042\050\043\041\044\047\054\036\001\002\000\026\020" +
    "\034\021\037\022\052\023\010\027\045\033\042\042\050" +
    "\043\041\044\047\054\036\001\002\000\022\015\uffe9\016" +
    "\uffe9\023\uffe9\037\uffe9\040\uffe9\041\uffe9\050\uffe9\051\uffe9" +
    "\001\002\000\006\036\055\047\151\001\002\000\004\026" +
    "\152\001\002\000\026\020\034\021\037\022\052\023\010" +
    "\027\045\033\042\042\050\043\041\044\047\054\036\001" +
    "\002\000\006\036\055\053\154\001\002\000\022\015\uffe7" +
    "\016\uffe7\023\uffe7\037\uffe7\040\uffe7\041\uffe7\050\uffe7\051" +
    "\uffe7\001\002\000\006\036\055\053\156\001\002\000\022" +
    "\015\uffe8\016\uffe8\023\uffe8\037\uffe8\040\uffe8\041\uffe8\050" +
    "\uffe8\051\uffe8\001\002\000\004\051\160\001\002\000\006" +
    "\002\uffff\007\uffff\001\002\000\006\002\000\007\163\001" +
    "\002\000\006\002\ufffd\007\ufffd\001\002\000\004\023\010" +
    "\001\002\000\006\010\166\050\ufffa\001\002\000\004\050" +
    "\170\001\002\000\004\023\010\001\002\000\004\050\ufffb" +
    "\001\002\000\014\004\ufff7\006\ufff7\011\ufff7\023\ufff7\051" +
    "\ufff7\001\002\000\014\004\172\006\176\011\ufff4\023\010" +
    "\051\ufff4\001\002\000\004\023\uffe3\001\002\000\004\023" +
    "\uffe1\001\002\000\026\004\ufff8\006\ufff8\011\ufff8\015\ufff8" +
    "\016\ufff8\023\ufff8\037\ufff8\041\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\004\023\010\001\002\000\006\023\uffe4\046\227" +
    "\001\002\000\006\011\200\051\201\001\002\000\010\004" +
    "\172\006\176\023\010\001\002\000\006\002\ufffe\007\ufffe" +
    "\001\002\000\006\011\ufff5\051\ufff5\001\002\000\004\023" +
    "\010\001\002\000\004\044\205\001\002\000\012\004\172" +
    "\006\176\023\010\045\ufff1\001\002\000\004\045\217\001" +
    "\002\000\004\045\ufff2\001\002\000\004\023\010\001\002" +
    "\000\006\045\uffef\052\212\001\002\000\010\004\172\006" +
    "\176\023\010\001\002\000\004\045\ufff3\001\002\000\004" +
    "\023\010\001\002\000\006\045\uffef\052\212\001\002\000" +
    "\004\045\ufff0\001\002\000\004\050\220\001\002\000\022" +
    "\004\ufff7\006\ufff7\015\ufff7\016\ufff7\023\ufff7\037\ufff7\041" +
    "\ufff7\050\ufff7\001\002\000\022\004\172\006\176\015\uffe5" +
    "\016\uffe5\023\010\037\uffe5\041\uffe5\050\uffe5\001\002\000" +
    "\016\015\223\016\027\023\010\037\030\041\032\050\031" +
    "\001\002\000\026\020\034\021\037\022\052\023\010\027" +
    "\045\033\042\042\050\043\041\044\047\054\036\001\002" +
    "\000\006\036\055\053\225\001\002\000\004\051\226\001" +
    "\002\000\006\011\ufff6\051\ufff6\001\002\000\004\047\230" +
    "\001\002\000\004\023\uffe2\001\002\000\004\053\232\001" +
    "\002\000\026\004\ufff9\006\ufff9\011\ufff9\015\ufff9\016\ufff9" +
    "\023\ufff9\037\ufff9\041\ufff9\050\ufff9\051\ufff9\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\004\004\160\001\001\000\004\033\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\024\033\025\001\001\000\002\001" +
    "\001\000\004\007\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\127\001\001\000\002\001\001\000" +
    "\020\014\037\023\034\024\043\025\042\026\052\027\045" +
    "\033\050\001\001\000\004\033\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\115\027\045\033\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\114" +
    "\027\045\033\050\001\001\000\002\001\001\000\020\014" +
    "\053\023\034\024\043\025\042\026\052\027\045\033\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\056" +
    "\024\043\025\042\026\052\027\045\033\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\074\025\042" +
    "\026\052\027\045\033\050\001\001\000\014\024\073\025" +
    "\042\026\052\027\045\033\050\001\001\000\014\024\062" +
    "\025\042\026\052\027\045\033\050\001\001\000\002\001" +
    "\001\000\012\025\072\026\052\027\045\033\050\001\001" +
    "\000\012\025\065\026\052\027\045\033\050\001\001\000" +
    "\002\001\001\000\010\026\071\027\045\033\050\001\001" +
    "\000\010\026\070\027\045\033\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\112\023\034\024\043\025" +
    "\042\026\052\027\045\033\050\001\001\000\004\033\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\104\023\034\024\043\025\042\026\052\027\045\030\103" +
    "\031\102\033\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\105\001\001\000\002\001\001\000\020" +
    "\014\107\023\034\024\043\025\042\026\052\027\045\033" +
    "\050\001\001\000\004\032\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\117\033\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\123\023\034\024\043\025\042\026\052" +
    "\027\045\033\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\130" +
    "\033\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\133\023\034\024\043\025\042\026\052\027\045" +
    "\033\050\001\001\000\002\001\001\000\006\006\135\033" +
    "\025\001\001\000\002\001\001\000\006\006\137\033\025" +
    "\001\001\000\002\001\001\000\020\014\141\023\034\024" +
    "\043\025\042\026\052\027\045\033\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\154\023\034\024\043\025\042\026\052\027\045\033\050" +
    "\001\001\000\020\014\147\023\034\024\043\025\042\026" +
    "\052\027\045\033\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\152\023\034\024" +
    "\043\025\042\026\052\027\045\033\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\161" +
    "\001\001\000\002\001\001\000\004\033\163\001\001\000" +
    "\004\011\164\001\001\000\002\001\001\000\004\033\166" +
    "\001\001\000\002\001\001\000\004\013\170\001\001\000" +
    "\012\012\173\015\174\017\176\033\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\230\001\001\000\002\001\001\000\004\016\201\001\001" +
    "\000\006\015\202\033\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\203\001\001\000\002\001\001" +
    "\000\012\015\207\020\206\021\205\033\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\210\001\001" +
    "\000\004\022\212\001\001\000\006\015\213\033\172\001" +
    "\001\000\002\001\001\000\004\033\214\001\001\000\004" +
    "\022\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\220\001\001\000\012\010\221\012\173\015\174" +
    "\033\172\001\001\000\006\006\130\033\025\001\001\000" +
    "\020\014\223\023\034\024\043\025\042\026\052\027\045" +
    "\033\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static void main(String args[]) throws Exception{
		new parser(new Lexer(new InputStreamReader(System.in))).parse();
	}
	public void syntax_error(Symbol s){                
		report_error("Erro de sintaxe na linha " + (s.right + 1) +
		", coluna " + s.left + ". Texto: ", s.value.toString());                
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_ID ::= T_IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_ID",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_EXPS_NOVO_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXPS_NOVO_OPT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_EXPS_NOVO_OPT ::= T_VIRGULA N_EXP N_EXPS_NOVO_OPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXPS_NOVO_OPT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_EXPS_OPT ::= 
            {
              Object RESULT =null;
		System.out.println("Passei  EXPS_OPT_NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXPS_OPT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_EXPS_OPT ::= N_EXPS 
            {
              Object RESULT =null;
		System.out.println("Passei  NExpsOPT1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXPS_OPT",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_EXPS ::= N_EXP N_EXPS_NOVO_OPT 
            {
              Object RESULT =null;
		System.out.println("Passei  NExps1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXPS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_PEXP ::= N_PEXP T_PONTO N_ID T_APARENTESES N_EXPS_OPT T_FPARENTESES 
            {
              Object RESULT =null;
		System.out.println("Passei  PExp6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PEXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_PEXP ::= N_PEXP T_PONTO N_ID 
            {
              Object RESULT =null;
		System.out.println("Passei  PExp5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PEXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_PEXP ::= T_APARENTESES N_EXP T_FPARENTESES 
            {
              Object RESULT =null;
		System.out.println("Passei  PExp4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PEXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_PEXP ::= T_NEW N_ID T_APARENTESES T_FPARENTESES 
            {
              Object RESULT =null;
		System.out.println("Passei  PExp3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PEXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_PEXP ::= T_THIS 
            {
              Object RESULT =null;
		System.out.println("Cheguei This");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PEXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_PEXP ::= N_ID 
            {
              Object RESULT =null;
		System.out.println("Passei  PExp1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PEXP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_SEXP ::= N_PEXP 
            {
              Object RESULT =null;
		System.out.println("Cheguei SEXP Linha 10");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_SEXP ::= N_PEXP T_ACOLCHETES N_EXP T_FCOLCHETES 
            {
              Object RESULT =null;
		System.out.println("Cheguei SEXP Linha 9");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_SEXP ::= N_PEXP T_PONTO T_LENGTH 
            {
              Object RESULT =null;
		System.out.println("Cheguei SEXP Linha 8");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_SEXP ::= T_NEW T_INT T_ACOLCHETES N_EXP T_FCOLCHETES 
            {
              Object RESULT =null;
		System.out.println("Cheguei SEXP Linha 7");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_SEXP ::= T_NULL 
            {
              Object RESULT =null;
		System.out.println("Cheguei Null");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_SEXP ::= T_INTEGER 
            {
              Object RESULT =null;
		System.out.println("Cheguei Number");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_SEXP ::= T_FALSE 
            {
              Object RESULT =null;
		System.out.println("Cheguei False");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_SEXP ::= T_TRUE 
            {
              Object RESULT =null;
		System.out.println("Cheguei True");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_SEXP ::= T_SUB N_SEXP 
            {
              Object RESULT =null;
		System.out.println("Cheguei SEXP Linha 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_SEXP ::= T_NOT N_SEXP 
            {
              Object RESULT =null;
		System.out.println("Cheguei SEXP Linha 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_SEXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_MEXP ::= N_SEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  MExp3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_MEXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_MEXP ::= N_MEXP T_DIV N_SEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  MExp2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_MEXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_MEXP ::= N_MEXP T_MULT N_SEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  MExp1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_MEXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_AEXP ::= N_MEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  AExp3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_AEXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_AEXP ::= N_AEXP T_SUB N_MEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  AExp2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_AEXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_AEXP ::= N_AEXP T_ADD N_MEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  AExp1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_AEXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_REXP ::= N_AEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  RExp4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_REXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_REXP ::= N_REXP T_DIFERENTE N_AEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  RExp3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_REXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_REXP ::= N_REXP T_IGUAL N_AEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  RExp2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_REXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_REXP ::= N_REXP T_MENOR N_AEXP 
            {
              Object RESULT =null;
		System.out.println("Passei  RExp1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_REXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_EXP ::= N_REXP 
            {
              Object RESULT =null;
		System.out.println("Passei  Exp2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_EXP ::= N_EXP T_E N_REXP 
            {
              Object RESULT =null;
		System.out.println("Passei  Exp1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_TIPO ::= N_ID 
            {
              Object RESULT =null;
		System.out.println("Passei  TIPO4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_TIPO ::= T_INT T_ACOLCHETES T_FCOLCHETES 
            {
              Object RESULT =null;
		System.out.println("Passei  TIPO1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_TIPO ::= T_BOOL 
            {
              Object RESULT =null;
		System.out.println("Passei  TIPO BOOL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_TIPO ::= T_INT 
            {
              Object RESULT =null;
		System.out.println("Passei  TIPO INT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_CMD_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD_OPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_CMD_OPT ::= N_CMD_OPT N_CMD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD_OPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_CMD_ID ::= T_ACOLCHETES N_EXP T_FCOLCHETES T_ATRIB N_EXP T_PONTOVIRGULA 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD_INT_2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD_ID",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_CMD_ID ::= T_ATRIB N_EXP T_PONTOVIRGULA 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD6");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD_ID",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_CMD ::= N_ID N_CMD_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_CMD ::= T_PRINTLN T_APARENTESES N_EXP T_FPARENTESES T_PONTOVIRGULA 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD5");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_CMD ::= T_WHILE T_APARENTESES N_EXP T_FPARENTESES N_CMD 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD4");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_CMD ::= T_IF T_APARENTESES N_EXP T_FPARENTESES N_CMD T_ELSE N_CMD 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_CMD ::= T_IF T_APARENTESES N_EXP T_FPARENTESES N_CMD 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_CMD ::= T_ACHAVES N_CMD_OPT T_FCHAVES 
            {
              Object RESULT =null;
		System.out.println("Passei  CMD1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CMD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_PARAMS_NOVO_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PARAMS_NOVO_OPT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_PARAMS_NOVO_OPT ::= T_VIRGULA N_TIPO N_ID N_PARAMS_NOVO_OPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PARAMS_NOVO_OPT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_PARAMS_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PARAMS_OPT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_PARAMS_OPT ::= N_PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PARAMS_OPT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_PARAMS ::= N_TIPO N_ID N_PARAMS_NOVO_OPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PARAMS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_METODO_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_METODO_OPT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_METODO_OPT ::= N_METODO_OPT N_METODO 
            {
              Object RESULT =null;
		System.out.println("Passei  METODO_OPT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_METODO_OPT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_METODO ::= T_PUBLIC N_TIPO N_ID T_APARENTESES N_PARAMS_OPT T_FPARENTESES T_ACHAVES N_VAR_OPT N_CMD_OPT T_RETURN N_EXP T_PONTOVIRGULA T_FCHAVES 
            {
              Object RESULT =null;
		System.out.println("Passei  METODO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_METODO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_VAR_OPT ::= 
            {
              Object RESULT =null;
		System.out.println("VAR_OPT NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_VAR_OPT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_VAR_OPT ::= N_VAR_OPT N_VAR 
            {
              Object RESULT =null;
		System.out.println("Passei  VAR_OPT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_VAR_OPT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_VAR ::= N_TIPO N_ID T_PONTOVIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_VAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_EXTENDS_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXTENDS_OPT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_EXTENDS_OPT ::= T_EXTENDS N_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_EXTENDS_OPT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_CLASSE_OPT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CLASSE_OPT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_CLASSE_OPT ::= N_CLASSE_OPT N_CLASSE 
            {
              Object RESULT =null;
		System.out.println("Passei  CLASSE_OPT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CLASSE_OPT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_CLASSE ::= T_CLASS N_ID N_EXTENDS_OPT T_ACHAVES N_VAR_OPT N_METODO_OPT T_FCHAVES 
            {
              Object RESULT =null;
		System.out.println("Passei  CLASSE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_CLASSE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_MAIN ::= T_CLASS N_ID T_ACHAVES T_PUBLIC T_STATIC T_VOID T_MAIN T_APARENTESES T_STRING T_ACOLCHETES T_FCOLCHETES N_ID T_FPARENTESES T_ACHAVES N_CMD T_FCHAVES T_FCHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_MAIN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // N_PROG ::= N_MAIN N_CLASSE_OPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

